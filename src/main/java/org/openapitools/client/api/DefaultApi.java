/*
 * Human Review
 * And API for manipulating Thread Indicator documents in STIX format
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kiet.tran@associates.hq.dhs.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIOptionsResultList;
import org.openapitools.client.model.ActionList;
import org.openapitools.client.model.AuthCredentials;
import org.openapitools.client.model.HumanReviewItem;
import org.openapitools.client.model.ListOfHumanReviewItems;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createActionList
     * @param actionList A new &#x60;ActionList&#x60; to be created. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createActionListCall(ActionList actionList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = actionList;

        // create path and map variables
        String localVarPath = "/actionLists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createActionListValidateBeforeCall(ActionList actionList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'actionList' is set
        if (actionList == null) {
            throw new ApiException("Missing the required parameter 'actionList' when calling createActionList(Async)");
        }
        

        com.squareup.okhttp.Call call = createActionListCall(actionList, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a ActionList
     * Creates a new instance of a &#x60;ActionList&#x60;.
     * @param actionList A new &#x60;ActionList&#x60; to be created. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createActionList(ActionList actionList) throws ApiException {
        createActionListWithHttpInfo(actionList);
    }

    /**
     * Create a ActionList
     * Creates a new instance of a &#x60;ActionList&#x60;.
     * @param actionList A new &#x60;ActionList&#x60; to be created. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createActionListWithHttpInfo(ActionList actionList) throws ApiException {
        com.squareup.okhttp.Call call = createActionListValidateBeforeCall(actionList, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a ActionList (asynchronously)
     * Creates a new instance of a &#x60;ActionList&#x60;.
     * @param actionList A new &#x60;ActionList&#x60; to be created. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createActionListAsync(ActionList actionList, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createActionListValidateBeforeCall(actionList, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteActionList
     * @param actionListId A unique identifier for a &#x60;ActionList&#x60;. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteActionListCall(String actionListId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/actionLists/{actionListId}"
            .replaceAll("\\{" + "actionListId" + "\\}", apiClient.escapeString(actionListId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteActionListValidateBeforeCall(String actionListId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'actionListId' is set
        if (actionListId == null) {
            throw new ApiException("Missing the required parameter 'actionListId' when calling deleteActionList(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteActionListCall(actionListId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a ActionList
     * Deletes an existing &#x60;ActionList&#x60;.
     * @param actionListId A unique identifier for a &#x60;ActionList&#x60;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteActionList(String actionListId) throws ApiException {
        deleteActionListWithHttpInfo(actionListId);
    }

    /**
     * Delete a ActionList
     * Deletes an existing &#x60;ActionList&#x60;.
     * @param actionListId A unique identifier for a &#x60;ActionList&#x60;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteActionListWithHttpInfo(String actionListId) throws ApiException {
        com.squareup.okhttp.Call call = deleteActionListValidateBeforeCall(actionListId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a ActionList (asynchronously)
     * Deletes an existing &#x60;ActionList&#x60;.
     * @param actionListId A unique identifier for a &#x60;ActionList&#x60;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteActionListAsync(String actionListId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteActionListValidateBeforeCall(actionListId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getActionList
     * @param actionListId A unique identifier for a &#x60;ActionList&#x60;. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getActionListCall(String actionListId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/actionLists/{actionListId}"
            .replaceAll("\\{" + "actionListId" + "\\}", apiClient.escapeString(actionListId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActionListValidateBeforeCall(String actionListId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'actionListId' is set
        if (actionListId == null) {
            throw new ApiException("Missing the required parameter 'actionListId' when calling getActionList(Async)");
        }
        

        com.squareup.okhttp.Call call = getActionListCall(actionListId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a ActionList
     * Gets the details of a single instance of a &#x60;ActionList&#x60;.
     * @param actionListId A unique identifier for a &#x60;ActionList&#x60;. (required)
     * @return ActionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActionList getActionList(String actionListId) throws ApiException {
        ApiResponse<ActionList> resp = getActionListWithHttpInfo(actionListId);
        return resp.getData();
    }

    /**
     * Get a ActionList
     * Gets the details of a single instance of a &#x60;ActionList&#x60;.
     * @param actionListId A unique identifier for a &#x60;ActionList&#x60;. (required)
     * @return ApiResponse&lt;ActionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActionList> getActionListWithHttpInfo(String actionListId) throws ApiException {
        com.squareup.okhttp.Call call = getActionListValidateBeforeCall(actionListId, null, null);
        Type localVarReturnType = new TypeToken<ActionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a ActionList (asynchronously)
     * Gets the details of a single instance of a &#x60;ActionList&#x60;.
     * @param actionListId A unique identifier for a &#x60;ActionList&#x60;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActionListAsync(String actionListId, final ApiCallback<ActionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActionListValidateBeforeCall(actionListId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getActionLists
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getActionListsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/actionLists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActionListsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getActionListsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List All ActionLists
     * Gets a list of all &#x60;ActionList&#x60; entities.
     * @return List&lt;ActionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ActionList> getActionLists() throws ApiException {
        ApiResponse<List<ActionList>> resp = getActionListsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List All ActionLists
     * Gets a list of all &#x60;ActionList&#x60; entities.
     * @return ApiResponse&lt;List&lt;ActionList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ActionList>> getActionListsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getActionListsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ActionList>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List All ActionLists (asynchronously)
     * Gets a list of all &#x60;ActionList&#x60; entities.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActionListsAsync(final ApiCallback<List<ActionList>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActionListsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ActionList>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for humanreviewPendingGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call humanreviewPendingGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/humanreview/pending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call humanreviewPendingGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = humanreviewPendingGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @return ListOfHumanReviewItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListOfHumanReviewItems humanreviewPendingGet() throws ApiException {
        ApiResponse<ListOfHumanReviewItems> resp = humanreviewPendingGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;ListOfHumanReviewItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListOfHumanReviewItems> humanreviewPendingGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = humanreviewPendingGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ListOfHumanReviewItems>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call humanreviewPendingGetAsync(final ApiCallback<ListOfHumanReviewItems> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = humanreviewPendingGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListOfHumanReviewItems>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for humanreviewPendingOptions
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call humanreviewPendingOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/humanreview/pending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call humanreviewPendingOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = humanreviewPendingOptionsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Return endpoint API documents
     * When requested, this endpoint/verb combination returns documentation explainin how this API endpoint works
     * @return APIOptionsResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public APIOptionsResultList humanreviewPendingOptions() throws ApiException {
        ApiResponse<APIOptionsResultList> resp = humanreviewPendingOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Return endpoint API documents
     * When requested, this endpoint/verb combination returns documentation explainin how this API endpoint works
     * @return ApiResponse&lt;APIOptionsResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<APIOptionsResultList> humanreviewPendingOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = humanreviewPendingOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<APIOptionsResultList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return endpoint API documents (asynchronously)
     * When requested, this endpoint/verb combination returns documentation explainin how this API endpoint works
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call humanreviewPendingOptionsAsync(final ApiCallback<APIOptionsResultList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = humanreviewPendingOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<APIOptionsResultList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for humanreviewStixIdFieldPost
     * @param stixId The unique identifier of the STIX document (required)
     * @param field The field to be updated (required)
     * @param humanReviewItem Field update POST request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call humanreviewStixIdFieldPostCall(String stixId, String field, HumanReviewItem humanReviewItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = humanReviewItem;

        // create path and map variables
        String localVarPath = "/humanreview/{stix_id}/{field}"
            .replaceAll("\\{" + "stix_id" + "\\}", apiClient.escapeString(stixId.toString()))
            .replaceAll("\\{" + "field" + "\\}", apiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call humanreviewStixIdFieldPostValidateBeforeCall(String stixId, String field, HumanReviewItem humanReviewItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'stixId' is set
        if (stixId == null) {
            throw new ApiException("Missing the required parameter 'stixId' when calling humanreviewStixIdFieldPost(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling humanreviewStixIdFieldPost(Async)");
        }
        
        // verify the required parameter 'humanReviewItem' is set
        if (humanReviewItem == null) {
            throw new ApiException("Missing the required parameter 'humanReviewItem' when calling humanreviewStixIdFieldPost(Async)");
        }
        

        com.squareup.okhttp.Call call = humanreviewStixIdFieldPostCall(stixId, field, humanReviewItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * update to support individual review
     * @param stixId The unique identifier of the STIX document (required)
     * @param field The field to be updated (required)
     * @param humanReviewItem Field update POST request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void humanreviewStixIdFieldPost(String stixId, String field, HumanReviewItem humanReviewItem) throws ApiException {
        humanreviewStixIdFieldPostWithHttpInfo(stixId, field, humanReviewItem);
    }

    /**
     * 
     * update to support individual review
     * @param stixId The unique identifier of the STIX document (required)
     * @param field The field to be updated (required)
     * @param humanReviewItem Field update POST request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> humanreviewStixIdFieldPostWithHttpInfo(String stixId, String field, HumanReviewItem humanReviewItem) throws ApiException {
        com.squareup.okhttp.Call call = humanreviewStixIdFieldPostValidateBeforeCall(stixId, field, humanReviewItem, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * update to support individual review
     * @param stixId The unique identifier of the STIX document (required)
     * @param field The field to be updated (required)
     * @param humanReviewItem Field update POST request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call humanreviewStixIdFieldPostAsync(String stixId, String field, HumanReviewItem humanReviewItem, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = humanreviewStixIdFieldPostValidateBeforeCall(stixId, field, humanReviewItem, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for humanreviewStixIdFieldPut
     * @param stixId The unique identifier of the STIX document (required)
     * @param field The field to be updated (required)
     * @param originalValue  (required)
     * @param acceptedValue  (required)
     * @param fieldName  (required)
     * @param actionType  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call humanreviewStixIdFieldPutCall(String stixId, String field, String originalValue, String acceptedValue, String fieldName, String actionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/humanreview/{stix_id}/{field}"
            .replaceAll("\\{" + "stix_id" + "\\}", apiClient.escapeString(stixId.toString()))
            .replaceAll("\\{" + "field" + "\\}", apiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (originalValue != null) {
            localVarFormParams.put("original_value", originalValue);
        }

        if (acceptedValue != null) {
            localVarFormParams.put("accepted_value", acceptedValue);
        }

        if (fieldName != null) {
            localVarFormParams.put("field_name", fieldName);
        }

        if (actionType != null) {
            localVarFormParams.put("action_type", actionType);
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call humanreviewStixIdFieldPutValidateBeforeCall(String stixId, String field, String originalValue, String acceptedValue, String fieldName, String actionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'stixId' is set
        if (stixId == null) {
            throw new ApiException("Missing the required parameter 'stixId' when calling humanreviewStixIdFieldPut(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling humanreviewStixIdFieldPut(Async)");
        }
        
        // verify the required parameter 'originalValue' is set
        if (originalValue == null) {
            throw new ApiException("Missing the required parameter 'originalValue' when calling humanreviewStixIdFieldPut(Async)");
        }
        
        // verify the required parameter 'acceptedValue' is set
        if (acceptedValue == null) {
            throw new ApiException("Missing the required parameter 'acceptedValue' when calling humanreviewStixIdFieldPut(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling humanreviewStixIdFieldPut(Async)");
        }
        
        // verify the required parameter 'actionType' is set
        if (actionType == null) {
            throw new ApiException("Missing the required parameter 'actionType' when calling humanreviewStixIdFieldPut(Async)");
        }
        

        com.squareup.okhttp.Call call = humanreviewStixIdFieldPutCall(stixId, field, originalValue, acceptedValue, fieldName, actionType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * update to support individual review
     * @param stixId The unique identifier of the STIX document (required)
     * @param field The field to be updated (required)
     * @param originalValue  (required)
     * @param acceptedValue  (required)
     * @param fieldName  (required)
     * @param actionType  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void humanreviewStixIdFieldPut(String stixId, String field, String originalValue, String acceptedValue, String fieldName, String actionType) throws ApiException {
        humanreviewStixIdFieldPutWithHttpInfo(stixId, field, originalValue, acceptedValue, fieldName, actionType);
    }

    /**
     * 
     * update to support individual review
     * @param stixId The unique identifier of the STIX document (required)
     * @param field The field to be updated (required)
     * @param originalValue  (required)
     * @param acceptedValue  (required)
     * @param fieldName  (required)
     * @param actionType  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> humanreviewStixIdFieldPutWithHttpInfo(String stixId, String field, String originalValue, String acceptedValue, String fieldName, String actionType) throws ApiException {
        com.squareup.okhttp.Call call = humanreviewStixIdFieldPutValidateBeforeCall(stixId, field, originalValue, acceptedValue, fieldName, actionType, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * update to support individual review
     * @param stixId The unique identifier of the STIX document (required)
     * @param field The field to be updated (required)
     * @param originalValue  (required)
     * @param acceptedValue  (required)
     * @param fieldName  (required)
     * @param actionType  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call humanreviewStixIdFieldPutAsync(String stixId, String field, String originalValue, String acceptedValue, String fieldName, String actionType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = humanreviewStixIdFieldPutValidateBeforeCall(stixId, field, originalValue, acceptedValue, fieldName, actionType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for humanreviewStixIdPost
     * @param stixId The ID of the STIX document (required)
     * @param humanReviewItem Create Human Review Items (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call humanreviewStixIdPostCall(String stixId, List<HumanReviewItem> humanReviewItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = humanReviewItem;

        // create path and map variables
        String localVarPath = "/humanreview/{stix_id}"
            .replaceAll("\\{" + "stix_id" + "\\}", apiClient.escapeString(stixId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call humanreviewStixIdPostValidateBeforeCall(String stixId, List<HumanReviewItem> humanReviewItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'stixId' is set
        if (stixId == null) {
            throw new ApiException("Missing the required parameter 'stixId' when calling humanreviewStixIdPost(Async)");
        }
        
        // verify the required parameter 'humanReviewItem' is set
        if (humanReviewItem == null) {
            throw new ApiException("Missing the required parameter 'humanReviewItem' when calling humanreviewStixIdPost(Async)");
        }
        

        com.squareup.okhttp.Call call = humanreviewStixIdPostCall(stixId, humanReviewItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param stixId The ID of the STIX document (required)
     * @param humanReviewItem Create Human Review Items (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void humanreviewStixIdPost(String stixId, List<HumanReviewItem> humanReviewItem) throws ApiException {
        humanreviewStixIdPostWithHttpInfo(stixId, humanReviewItem);
    }

    /**
     * 
     * 
     * @param stixId The ID of the STIX document (required)
     * @param humanReviewItem Create Human Review Items (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> humanreviewStixIdPostWithHttpInfo(String stixId, List<HumanReviewItem> humanReviewItem) throws ApiException {
        com.squareup.okhttp.Call call = humanreviewStixIdPostValidateBeforeCall(stixId, humanReviewItem, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param stixId The ID of the STIX document (required)
     * @param humanReviewItem Create Human Review Items (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call humanreviewStixIdPostAsync(String stixId, List<HumanReviewItem> humanReviewItem, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = humanreviewStixIdPostValidateBeforeCall(stixId, humanReviewItem, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for humanreviewStixIdPut
     * @param stixId The ID of the STIX document (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call humanreviewStixIdPutCall(String stixId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/humanreview/{stix_id}"
            .replaceAll("\\{" + "stix_id" + "\\}", apiClient.escapeString(stixId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call humanreviewStixIdPutValidateBeforeCall(String stixId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'stixId' is set
        if (stixId == null) {
            throw new ApiException("Missing the required parameter 'stixId' when calling humanreviewStixIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = humanreviewStixIdPutCall(stixId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param stixId The ID of the STIX document (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void humanreviewStixIdPut(String stixId) throws ApiException {
        humanreviewStixIdPutWithHttpInfo(stixId);
    }

    /**
     * 
     * 
     * @param stixId The ID of the STIX document (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> humanreviewStixIdPutWithHttpInfo(String stixId) throws ApiException {
        com.squareup.okhttp.Call call = humanreviewStixIdPutValidateBeforeCall(stixId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param stixId The ID of the STIX document (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call humanreviewStixIdPutAsync(String stixId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = humanreviewStixIdPutValidateBeforeCall(stixId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateActionList
     * @param actionListId A unique identifier for a &#x60;ActionList&#x60;. (required)
     * @param actionList Updated &#x60;ActionList&#x60; information. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateActionListCall(String actionListId, ActionList actionList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = actionList;

        // create path and map variables
        String localVarPath = "/actionLists/{actionListId}"
            .replaceAll("\\{" + "actionListId" + "\\}", apiClient.escapeString(actionListId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateActionListValidateBeforeCall(String actionListId, ActionList actionList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'actionListId' is set
        if (actionListId == null) {
            throw new ApiException("Missing the required parameter 'actionListId' when calling updateActionList(Async)");
        }
        
        // verify the required parameter 'actionList' is set
        if (actionList == null) {
            throw new ApiException("Missing the required parameter 'actionList' when calling updateActionList(Async)");
        }
        

        com.squareup.okhttp.Call call = updateActionListCall(actionListId, actionList, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a ActionList
     * Updates an existing &#x60;ActionList&#x60;.
     * @param actionListId A unique identifier for a &#x60;ActionList&#x60;. (required)
     * @param actionList Updated &#x60;ActionList&#x60; information. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateActionList(String actionListId, ActionList actionList) throws ApiException {
        updateActionListWithHttpInfo(actionListId, actionList);
    }

    /**
     * Update a ActionList
     * Updates an existing &#x60;ActionList&#x60;.
     * @param actionListId A unique identifier for a &#x60;ActionList&#x60;. (required)
     * @param actionList Updated &#x60;ActionList&#x60; information. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateActionListWithHttpInfo(String actionListId, ActionList actionList) throws ApiException {
        com.squareup.okhttp.Call call = updateActionListValidateBeforeCall(actionListId, actionList, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a ActionList (asynchronously)
     * Updates an existing &#x60;ActionList&#x60;.
     * @param actionListId A unique identifier for a &#x60;ActionList&#x60;. (required)
     * @param actionList Updated &#x60;ActionList&#x60; information. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateActionListAsync(String actionListId, ActionList actionList, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateActionListValidateBeforeCall(actionListId, actionList, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for userPut
     * @param authCredentials Allow the user to submit their credentials and on success return a token for use in making other REST calls (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userPutCall(AuthCredentials authCredentials, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authCredentials;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userPutValidateBeforeCall(AuthCredentials authCredentials, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authCredentials' is set
        if (authCredentials == null) {
            throw new ApiException("Missing the required parameter 'authCredentials' when calling userPut(Async)");
        }
        

        com.squareup.okhttp.Call call = userPutCall(authCredentials, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param authCredentials Allow the user to submit their credentials and on success return a token for use in making other REST calls (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String userPut(AuthCredentials authCredentials) throws ApiException {
        ApiResponse<String> resp = userPutWithHttpInfo(authCredentials);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param authCredentials Allow the user to submit their credentials and on success return a token for use in making other REST calls (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> userPutWithHttpInfo(AuthCredentials authCredentials) throws ApiException {
        com.squareup.okhttp.Call call = userPutValidateBeforeCall(authCredentials, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authCredentials Allow the user to submit their credentials and on success return a token for use in making other REST calls (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userPutAsync(AuthCredentials authCredentials, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userPutValidateBeforeCall(authCredentials, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
