/*
 * Human Review
 * And API for manipulating Thread Indicator documents in STIX format
 *
 * OpenAPI spec version: 1.0.0
 * Contact: deven.phillips@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Sort order:   * &#x60;approve_all&#x60; - Approve entire group as not having PII   * &#x60;disseminate&#x60; - Mark as resolved and available for dissemination   * &#x60;do_not_disseminate&#x60; - Mark as resolved and NOT to be disseminated 
 */
@JsonAdapter(GroupAction.Adapter.class)
public enum GroupAction {
  
  DISSEMINATE("disseminate"),
  
  DO_NOT_DESSIMINATE("do_not_dessiminate"),
  
  APPROVE_ALL("approve_all");

  private String value;

  GroupAction(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static GroupAction fromValue(String text) {
    for (GroupAction b : GroupAction.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + text + "'");
  }

  public static class Adapter extends TypeAdapter<GroupAction> {
    @Override
    public void write(final JsonWriter jsonWriter, final GroupAction enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public GroupAction read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return GroupAction.fromValue(String.valueOf(value));
    }
  }
}

